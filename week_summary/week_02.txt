'Summary note for the second week from 080321 to 080621' 

080321
파일 순서
open() -> read()/write() -> close()
문자파일 : 내가 볼 수 있는 파일
binary file : 내가 알 수 없는 파일
권한 : 파일에 read, write, access할 수 있는 권한 , 이권한을 grouping한다. owner, group, others

apikey.txt는 gitignore folder에 보관해서 github에 올라가지 않도록 한다.
programming을 할 때는 open()으로 불러서 이용한다.

내 코드가 반복되는 경우가 빈번하게 발생한다면 반복을 줄이고 프로그램을 간결하게 만들기 위해 함수와 모듈을 사용한다.
또한 오타나 여러가지의 실수를 줄이기 위해서 사용한다.
어떻게 하면 함수를 쓸 수 있을까를 연습해서 나의 로직을 명쾌하게 해야 한다.


pallindrome = []
for x in range(100, 1000):
    for y in range(100, 1000):
        z = x * y
        str_z = str(z)
        if str_z == str_z[::-1]:
            pallindrome.append(z)

위치인수중 고정인수가 먼저 오고 가변인수가 그다음에 온다. 위치인수다음 키워드인수가 온다
위치인수 키워드인수를 이용해서 내가 만드는 함수를 더 많은 경우의 수에 사용할 수 있게 한다.

재귀호출 : 함수안에서 자기자신을 부른다
피보나치 수열 : a(n) = a(n-1) + a(n-2), where a(1) = a(2) = 1, n>3
fibo(n) = fibo(n-1) + fibo(n-2)

객체지향은 JAVA, C#이다.
syntax를 익힌다는게 매우 어렵다.
나중에 기계학습, 딥러닝할 때 다른 사람들이 만든 코드는 전부 객체지향으로 되어 있기 때문에 잘 알아야 한다.

080421
Object Oriented : 객체지향 Java, C#이 대표적이다. 
원본이 클래스를 정의하고 붕어빵을 찍어내듯이 객체(주어)를 instanciate해서 속성과 메쏘드(객체가 할 수 있는 일들)를 이용해서 
프로그램을 한다.
상속을 받고 나만의 것을 추가하면 훨씬 더 빠를게 프로그램을 할 수 있다.
객체지향은 프로그램이 상당히 클 경우에 매우 유리하다.
인터페이스를 상속받아 구현한다.

객체지향 프로그램의 특징

1. 캡슐화(encapsulation) : 객체는 속성과 메쏘드로 구성되어 있는데 속성값을 변경하려 할 때 꼭 정해진 절차를 통해서만 할 수 있다.
은행의 고객 balance를 제한된 수단을 통해서만 변경할 수 있다. 속성값을 보호하기 위한 조치로서 바깥에서는 그 내부를 볼 수 없고 
사용자가 임의로 고칠 수가 없고 통제된 방법을 통해서만 할 수 있다.

2. 상속(inheritance) : 척추동물이 갖고 있는 기본적인 특징은 미리 만들어 놓고 각각의 다른 종류들이 이어 받아 사용한다.

3. 다형성(polymorphism) overriding을 다형성이라고 한다. 다형성이란 부모가 만든 것을 자식이 바꿔치기 하는것이다.

int, list....모두 다 클래스이다.
list는 각각의 원소들이 객체를 참조하고 있는 것이고 numpy.array는 각각의 원소들이 array안에 그냥 들어있다.

상속을 통해서 중복을 피해야 한다. 

클래스 속성감추기(캡슐화), 상속(기반클래스와 자식클래스), 다형성(오버라이딩),  이런것들을 이용해서 클래스 만들줄 알면 된다.

080521
u32심사문제
1.png, 2.docx, 
files = input().split()
list(map(lambda  x : f"{int(x.split('.')[0]):03d}.{x.split('.')[1]}", files))

ZeroDivisionError, AttributeError, NameError, ValueError...

Object -> BaseException -> Exception -> ArithmeticError -> ZeroDivisionError

정규표현식 : 어떤 문자열의 패턴을 찾아내는것
regexr.com에 wikipedia/정규표현식의 패턴을 입력해봐라.
email 정규표현식
비밀번호 정규표현식
핸드폰 정규표현식
[^ㄱ-ㅎ ㅏ-1가-힣 ] # 한글과 공백이 아닌 것
re.sub('[^ㄱ-ㅎ ㅏ-1가-힣 ]', '', text)  # 한글과 공백이 아니면 다 없애라

다른 정규현식 사이트에 가서 확인을 해야 한다. 외우기에는 양이 너무 많다. (정규식 테스트 사이트 모임)

*.py, *.html, *.css를 편집하려면 jupyter notebook으로는 안되고 vscode같은 편집기가 필요하다.
내가 모듈을 만들어서 사용할 수 있어야만 큰 프로그램을 작성할 수 있다.

가상 환경(virtual environment)
- 프로젝트 : Python 3.7, numpy, pandas, matplotlib
- 경진대회 : Python 3.6으로 하세요라고 할 수도 있다. 
- 기본환경 : Python 3.8, 다양한 라이브러리  ----------------- base

각각의 python의 numpy는 버전이 다를 가능성이 많다. 개발환경 구축하는게 쉽지가 않다
위에서처럼 각각의 목적에 따라 가상환경을 구축할 수가 있다.

가상환경을 만들어 주는 프로그램 -virtualenv, Anaconda
Anaconda에서 conda라는 명령으로 가상환경을 만들 수 있음

conda info --envs  # 가상환경을 볼 수 있음
conda create -n test python=3.7  # 가상환경 설치
conda env list  # 가상환경 리스트
conda deactivate # base환경에서 빠져 나왔음
conda activate test      # test 환경으로 들어왔기 때문에 python3.7로 버전이 변경

pip install package-name  # 가상환경을 무시하고 설치. 가상환경을 사용하는 사람은 pip을 먼저 사용하지 마라.

KoNLPy : Korean Natural Language Processing Python : pip로만 설치가 가능하다.

conda activate 가상환경
(가상환경)conda install package-name
(가상환경)conda install -c conda-forge package-name

base = 2

def square(n):
    return base ** 2

어떤 파일을 라이브러리로 사용하지 말고 직접 실행하고 싶다면 
if __name__ == '__main__': 나로부터 출발한다는 의미
라이브러리로 사용할 때는 __name__값이 달라진다.
파이썬에서는 main은 내 프로그램이 단독으로 돌아가면 내가 main이고 라이브러리고 불려가면 그쪽이 main이다
내가 만든 프로그램이 제대로 돌아가는지 테스트하기 위해 if 절밑에 테스트할 내용을 코딩한다.

base = 2

def square(n):
        return  n ** base

print(square(5))


if  __name__ == '__main__':
    print(base)
    print(square(5))

